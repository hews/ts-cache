"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CacheEvictionPolicies = void 0;
// CacheKey, CacheValue provide basic constraints for the key and value
// types that can be supported. Further contrainst can be placed by the
// storage adapters.
//
// Our cache supports cache eviction policies in terms of insertion
// order (FIFO, LIFO), read order (LRU), or random access (RR). No
// eviction: or failure to set, is not supported. More complex or
// stats-based eviction policies (LFU, eg) are also not supported, both
// for general simplicity-of-use and also compatibility.
//
// A given adaptor may also limit the policies it will accept: Redis,
// would only allow LRU and RR, eg.
//
let CacheEvictionPolicies; // CacheConstructorOptions define the standard set of parameters we can
// initialize a cache with. The partial interface is aliased as the
// nice-to-use CacheOpts.
//

exports.CacheEvictionPolicies = CacheEvictionPolicies;

(function (CacheEvictionPolicies) {
  CacheEvictionPolicies["FIFO"] = "FIFO";
  CacheEvictionPolicies["LIFO"] = "LIFO";
  CacheEvictionPolicies["LRU"] = "LRU";
  CacheEvictionPolicies["RR"] = "RR";
})(CacheEvictionPolicies || (exports.CacheEvictionPolicies = CacheEvictionPolicies = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,