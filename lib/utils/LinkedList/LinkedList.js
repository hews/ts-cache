"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _LinkedListIterator = _interopRequireDefault(require("./LinkedListIterator"));

var _LinkedListNode = _interopRequireDefault(require("./LinkedListNode"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// A utility type assertion function for type guarding below.
//
function isIterable(v) {
  return typeof v !== 'string' && typeof v[Symbol.iterator] === 'function';
} // A simple, typed, doubly-linked list implementation included to allow
// us to build the LRU linked list for the default MemoryStore
// datamapper. This is also exported to allow an including library to
// build its own, more specific storage implementation, but with a (now)
// off-the-shelf linked list implementation.
//
// It's included to allow us to keep our no-dependencies cool. Based on
// {@link https://github.com/isaacs/yallist}.
//


class LinkedList {
  constructor(iterable) {
    _defineProperty(this, "head", undefined);

    _defineProperty(this, "tail", undefined);

    _defineProperty(this, "length", 0);

    if (iterable) {
      // NOTE: [PJ] not utilizing iterable for portability.
      const arr = Array.from(iterable);

      for (let i = 0, len = arr.length; i < len; i++) {
        this.push(arr[i]);
      }
    }
  }

  pushNode(node) {
    if (node.list) {
      node.list.removeNode(node);
    }

    node.list = this;
    const {
      tail
    } = this;
    node.prev = tail;

    if (tail) {
      tail.next = node;
    }

    this.tail = node;

    if (!this.head) {
      this.head = node;
    }

    this.length += 1;
  }

  unshiftNode(node) {
    if (node.list) {
      node.list.removeNode(node);
    }

    node.list = this;
    const {
      head
    } = this;
    node.next = head;

    if (head) {
      head.prev = node;
    }

    this.head = node;

    if (!this.tail) {
      this.tail = node;
    }

    this.length += 1;
  }

  removeNode(node) {
    if (node.list !== this) {
      throw new Error('removing node which does not belong to this list');
    }

    const {
      next
    } = node;
    const {
      prev
    } = node;

    if (next) {
      next.prev = prev;
    }

    if (prev) {
      prev.next = next;
    }

    if (node === this.head) {
      this.head = next;
    }

    if (node === this.tail) {
      this.tail = prev;
    }

    node.next = undefined;
    node.prev = undefined;
    node.list = undefined;
    this.length -= 1;
  }

  push(data) {
    if (isIterable(data)) {
      // NOTE: [PJ] not utilizing iterable for portability.
      const arr = Array.from(data);

      for (let i = 0, len = arr.length; i < len; i++) {
        this.push(arr[i]);
      }

      return;
    }

    this.pushNode(new _LinkedListNode.default({
      data
    }));
  }

  unshift(data) {
    if (isIterable(data)) {
      // NOTE: [PJ] not utilizing iterable for portability.
      const arr = Array.from(data);

      for (let i = 0, len = arr.length; i < len; i++) {
        this.unshift(arr[i]);
      }

      return;
    }

    this.unshiftNode(new _LinkedListNode.default({
      data
    }));
  }

  pop() {
    if (this.tail === undefined) {
      return undefined;
    }

    const {
      data
    } = this.tail;
    this.removeNode(this.tail);
    return data;
  }

  shift() {
    if (this.head === undefined) {
      return undefined;
    }

    const {
      data
    } = this.head;
    this.removeNode(this.head);
    return data;
  }

  get iterator() {
    return new _LinkedListIterator.default(this);
  }

}

exports.default = LinkedList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,